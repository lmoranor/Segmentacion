## ====================================================
## PROYECTO DE SEGMENTACIÓN DE CLIENTES MEDIANTE K-MEANS Y ÁRBOLES DE DECISIÓN
## ====================================================

## ------------------------
## Carga de Librerías
## ------------------------
library(tidyverse)
library(lubridate)
library(cluster)
library(factoextra)
library(rpart)
library(rpart.plot)
library(readxl)
library(ggplot2)
library(caret)
library(dplyr)
library(openxlsx)

## ------------------------
## Carga de base de datos
## ------------------------
datos <- read.xlsx("C:/..../Retail_clean.xlsx")

## ------------------------
## Preprocesamiento de datos
## ------------------------
datos_clean <- datos %>%
  mutate(InvoiceDate = as.Date(as.numeric(InvoiceDate), origin = "1899-12-30"))

## ------------------------
## Cálculo de métricas RFM
## ------------------------
ref_fecha <- max(datos_clean$InvoiceDate, na.rm = TRUE) + 1  # Fecha de referencia

rfm_data <- datos_clean %>%
  group_by(CustomerID) %>%
  summarise(
    Recency   = as.numeric(ref_fecha - max(InvoiceDate)),
    Frequency = n_distinct(InvoiceNo),
    Monetary  = sum(Quantity * UnitPrice),
    .groups = "drop"
  )

## ------------------------
## Escalado de métricas RFM (sin CustomerID)
## ------------------------
rfm_scaled <- scale(rfm_data[, 2:4])

## ------------------------
## Determinar número óptimo de clusters
## ------------------------
fviz_nbclust(rfm_scaled, kmeans, method = "wss") +
  labs(title = "Número óptimo de Clusters (Método del Codo)")

fviz_nbclust(rfm_scaled, kmeans, method = "silhouette") +
  labs(title = "Número óptimo de Clusters (Método Silhouette)")

## Número óptimo elegido: 4
k_optimo <- 4

## ------------------------
## K-means clustering
## ------------------------
set.seed(123)
km <- kmeans(rfm_scaled, centers = k_optimo, nstart = 25)
rfm_data$Segment <- as.factor(km$cluster)

## ------------------------
## Estadísticas descriptivas por clúster
## ------------------------
rfm_summary_stats <- rfm_data %>%
  group_by(Segment) %>%
  summarise(
    Count         = n(),
    Avg_Recency   = mean(Recency),
    Avg_Frequency = mean(Frequency),
    Avg_Monetary  = mean(Monetary),
    .groups = "drop"
  ) %>%
  arrange(Segment)

print(rfm_summary_stats)

## ------------------------
## Renombrar segmentos con etiquetas descriptivas
## ------------------------
segment_names <- c("Clientes Inactivos", 
                   "Clientes Oro", 
                   "Clientes Diamante", 
                   "Clientes Prometedores")

# Asignar etiquetas a los clusters (verificar que las posiciones coincidan con los perfiles reales)
km_named <- km
km_named$cluster <- factor(km$cluster, levels = 1:4, labels = segment_names)

## ------------------------
## Visualización 2D de los clusters
## ------------------------
fviz_cluster(km_named, 
             data = rfm_scaled, 
             geom = "point", 
             ellipse.type = "convex", 
             labelsize = 8,
             main = "Segmentación de Clientes por Análisis RFM")

## ------------------------
## Agregar segmentos a la base original
## ------------------------
df_segmented <- datos_clean %>%
  left_join(dplyr::select(rfm_data, CustomerID, Segment), by = "CustomerID")

## ------------------------
## Árbol de decisión para clasificación
## ------------------------
set.seed(123)
train_index <- createDataPartition(rfm_data$Segment, p = 0.7, list = FALSE)
train_data  <- rfm_data[train_index, ]
test_data   <- rfm_data[-train_index, ]

tree_model <- rpart(Segment ~ Recency + Frequency + Monetary, data = train_data, method = "class")

# Visualización del árbol
rpart.plot(tree_model, type = 2, extra = 104, fallen.leaves = TRUE)

# Predicción y evaluación
preds <- predict(tree_model, test_data, type = "class")
confusionMatrix(preds, test_data$Segment)

## ------------------------
## Exportar resultados a Excel
## ------------------------
write.xlsx(df_segmented, file = "C:/....../df_segmented.xlsx")
write.xlsx(rfm_data,    file = "C:/....../rfm_data.xlsx")


