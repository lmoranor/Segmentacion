################################################################################
## PROYECTO DE SEGMENTACIÓN DE CLIENTES MEDIANTE USO DE K-MEANS Y DECISION TREES
################################################################################

#===============================#
# CARGA DE LIBRERÍAS
#===============================#
library(tidyverse)
library(lubridate)
library(cluster)
library(factoextra)
library(rpart)
library(rpart.plot)
library(readxl)
library(ggplot2)
library(caret)
library(dplyr)
library(openxlsx)

#===============================#
# CARGA DE BASE DE DATOS
#===============================#
datos <- read.xlsx("C:/ruta/a/tu/archivo/Retail_clean.xlsx")  # Actualiza la ruta del archivo

#===============================#
# LIMPIEZA Y FORMATO DE DATOS
#===============================#
datos_clean <- datos %>%
  mutate(InvoiceDate = as.Date(as.numeric(InvoiceDate), origin = "1899-12-30"))

#===============================#
# CÁLCULO DE MÉTRICAS RFM
#===============================#
# Fecha de análisis (última fecha disponible + 1)
ref_fecha <- max(datos_clean$InvoiceDate, na.rm = TRUE) + 1

# Cálculo de Recency, Frequency y Monetary por cliente
rfm_data <- datos_clean %>%
  group_by(CustomerID) %>%
  summarise(
    Recency   = as.numeric(ref_fecha - max(InvoiceDate)),          # Días desde última compra
    Frequency = n_distinct(InvoiceNo),                             # Nº de compras únicas
    Monetary  = sum(Quantity * UnitPrice)                          # Valor total comprado
  )

#===============================#
# ESCALAMIENTO DE MÉTRICAS RFM
#===============================#
rfm_scaled <- scale(rfm_data[, 2:4])  # Excluye CustomerID

#===============================#
# DETERMINACIÓN DEL Nº ÓPTIMO DE CLUSTERS
#===============================#
# Método del codo
fviz_nbclust(rfm_scaled, kmeans, method = "wss") +
  labs(title = "Número óptimo de Clusters (Método del Codo)")

# Método Silhouette
fviz_nbclust(rfm_scaled, kmeans, method = "silhouette") +
  labs(title = "Número óptimo de Clusters (Método Silhouette)")

# Basado en los gráficos, asumimos que el número óptimo de clusters es 4
k_optimo <- 4

#===============================#
# K-MEANS CLUSTERING
#===============================#
set.seed(123)
km <- kmeans(rfm_scaled, centers = k_optimo, nstart = 25)

# Asignar el cluster a cada cliente
rfm_data$Segment <- as.factor(km$cluster)

#===============================#
# ÁRBOL DE DECISIÓN PARA INTERPRETACIÓN DE CLUSTERS
#===============================#
# División del conjunto en entrenamiento (70%) y prueba (30%)
set.seed(123)
train_index <- createDataPartition(rfm_data$Segment, p = 0.7, list = FALSE)
train_data <- rfm_data[train_index, ]
test_data  <- rfm_data[-train_index, ]

# Entrenamiento del árbol de decisión
tree_model <- rpart(Segment ~ Recency + Frequency + Monetary,
                    data = train_data,
                    method = "class")

# Visualización del árbol
rpart.plot(tree_model, type = 2, extra = 104, fallen.leaves = TRUE)

# Predicción sobre datos de prueba
preds <- predict(tree_model, test_data, type = "class")

# Evaluación mediante matriz de confusión
confusionMatrix(preds, test_data$Segment)

#===============================#
# VISUALIZACIÓN DE CLUSTERS
#===============================#
fviz_cluster(km, data = rfm_scaled,
             geom = "point",
             ellipse.type = "convex",
             labelsize = 8)

#===============================#
# RESUMEN ESTADÍSTICO POR SEGMENTO
#===============================#
rfm_summary_stats <- rfm_data %>%
  group_by(Segment) %>%
  summarise(
    Count         = n(),
    Avg_Recency   = mean(Recency),
    Avg_Frequency = mean(Frequency),
    Avg_Monetary  = mean(Monetary)
  ) %>%
  arrange(Segment)

print(rfm_summary_stats)

#===============================#
# EXPORTACIÓN DE RESULTADOS
#===============================#
# Integrar segmentación a los datos originales
df_segmented <- datos_clean %>%
  left_join(select(rfm_data, CustomerID, Segment), by = "CustomerID")

# Guardar en archivos Excel para uso posterior
write.xlsx(df_segmented, file = "C:/ruta/de/salida/df_segmented.xlsx")
write.xlsx(rfm_data,    file = "C:/ruta/de/salida/rfm_data.xlsx")

